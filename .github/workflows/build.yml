name: Build

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  GIT_SUBMODULE_STRATEGY: recursive

permissions:
  contents: write

jobs:

  build-desktop-winxp:
    strategy:
      fail-fast: false
      matrix:
        arch: [ x86, x64 ]
        toolset: [ 14.29, 14.44 ]
        image: [ windows-2022 ]
    runs-on: ${{ matrix.image }}
    name: Build-${{ matrix.toolset }} (${{ matrix.arch }})
    steps:
      - name: Fetch sources
        uses: actions/checkout@v4

      # Cache AUI boot directory
      - name: Cache AUI.BOOT deps
        id: cache-aui-boot
        uses: actions/cache@v3
        env:
          cache-name: aui-boot
        with:
          path: ~/.aui
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Configure CMake
        run: cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=RelWithDebInfo ${{ matrix.additional_cmake_flags }} -DAUI_INSTALL_RUNTIME_DEPENDENCIES=TRUE

      - name: Build Project
        run: cmake --build ${{ github.workspace }}/build --config RelWithDebInfo

      - name: Build Tests
        run: cmake --build ${{ github.workspace }}/build --config RelWithDebInfo --target Tests

      - name: Run Tests (Windows)
        if: runner.os == 'Windows'
        working-directory: ${{ github.workspace }}/build/bin/RelWithDebInfo/
        run: ${{ github.workspace }}/build/bin/RelWithDebInfo/Tests.exe

      - name: Pack Windows Setup
        if: runner.os == 'Windows'
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake . -DAUI_APP_PACKAGING=INNOSETUP
          cmake --build . --config RelWithDebInfo
          cpack . -CRelWithDebInfo -B artifacts

      - name: Pack Windows Portable
        if: runner.os == 'Windows'
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake . -DAUI_APP_PACKAGING=AUI_PORTABLE_ZIP
          cmake --build . --config RelWithDebInfo
          cpack . -CRelWithDebInfo -B artifacts

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/build/artifacts/*.*
          name: winxp-${{ matrix.toolset }}-${{ matrix.arch }}-r${{ github.run_attempt }}
          if-no-files-found: error

  build-desktop:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, ubuntu-latest ]

    steps:
      - name: Fetch sources
        uses: actions/checkout@v4

      # Cache AUI boot directory
      - name: Cache AUI.BOOT deps
        id: cache-aui-boot
        uses: actions/cache@v3
        env:
          cache-name: aui-boot
        with:
          path: ~/.aui
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y pkg-config libglew-dev zlib1g-dev libssl-dev libcrypt-dev libcurl4-openssl-dev libgtk-3-dev libfontconfig-dev ninja-build libpulse-dev

      - name: Configure CMake
        run: cmake -G "${{ matrix.os == 'windows-latest' && 'Visual Studio 17 2022' || 'Ninja' }}" -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=RelWithDebInfo ${{ matrix.additional_cmake_flags }} -DAUI_INSTALL_RUNTIME_DEPENDENCIES=TRUE

      - name: Build Project
        run: cmake --build ${{ github.workspace }}/build --config RelWithDebInfo

      - name: Build Tests
        run: cmake --build ${{ github.workspace }}/build --config RelWithDebInfo --target Tests

      - name: Run Tests (Windows)
        if: runner.os == 'Windows'
        working-directory: ${{ github.workspace }}/build/bin/RelWithDebInfo/
        run: ${{ github.workspace }}/build/bin/RelWithDebInfo/Tests.exe

      - name: Run Tests (Linux)
        if: runner.os == 'Linux'
        working-directory: ${{ github.workspace }}/build/bin
        run: ${{ github.workspace }}/build/bin/Tests

      - name: Pack Windows Setup
        if: runner.os == 'Windows'
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake . -DAUI_APP_PACKAGING=INNOSETUP
          cmake --build . --config RelWithDebInfo
          cpack . -CRelWithDebInfo -B artifacts

      - name: Pack Windows Portable
        if: runner.os == 'Windows'
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake . -DAUI_APP_PACKAGING=AUI_PORTABLE_ZIP
          cmake --build . --config RelWithDebInfo
          cpack . -CRelWithDebInfo -B artifacts

      - name: Pack Linux Portable (ZIP)
        if: runner.os == 'Linux'
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake . -DAUI_APP_PACKAGING=AUI_PORTABLE_ZIP
          cmake --build . --config RelWithDebInfo
          cpack . -CRelWithDebInfo -B artifacts

      - name: Pack Linux Portable (tar.gz)
        if: runner.os == 'Linux'
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake . -DAUI_APP_PACKAGING=AUI_PORTABLE_TGZ
          cmake --build . --config RelWithDebInfo
          cpack . -CRelWithDebInfo -B artifacts

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/build/artifacts/*.*
          name: desktop-${{ runner.os }}-r${{ github.run_attempt }}
          if-no-files-found: error

  release-draft:
    runs-on: ubuntu-latest
    permissions: write-all
    if: github.event_name != 'pull_request'
    needs: [ build-desktop, build-desktop-winxp ]
    name: Release draft
    steps:
      - name: Fetch sources
        uses: actions/checkout@v4

      - name: Extract version
        run: |
          VERSION=$(grep -Po '[0-9\.]+(?= # CI_PROJECT_VERSION)' CMakeLists.txt)
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "VERSION = $VERSION"

      # Remove old release drafts
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -r -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      - name: Download desktop artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/desktop
          pattern: desktop-*

      - name: Download XP artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/winxp
          pattern: winxp-*

      - name: Merge artifacts
        run: |
          mkdir -p artifacts/all
          cp -r artifacts/desktop/* artifacts/all/ || true
          cp -r artifacts/winxp/* artifacts/all/ || true
          ls -al artifacts/all || true

      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "v${{ env.VERSION }}" \
            --draft \
            --title "v${{ env.VERSION }}" \
            --target "$GITHUB_SHA" \
            artifacts/all/*.*
